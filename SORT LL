/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
 ListNode* merge(ListNode* head1, ListNode* head2) {
        if(head1==NULL){
            return head2;
        }
        if(head2==NULL){
            return head1;
        }
        

     
        ListNode* ans=new ListNode(-1) ;
        ListNode* ansKaTail=ans ;

        while(head1 && head2){
            
            if(head1->val<=head2->val){
              
               
                ansKaTail->next=head1;
                ansKaTail=head1;
                head1=head1->next;
            }
            else{
               
              
                ansKaTail->next=head2;
                ansKaTail=head2;
                head2=head2->next;
            }
        }
       if(head1){
            ansKaTail->next=head1;
        }
       
        if(head2){
            ansKaTail->next=head2 ;
        }
      
        return ans->next;
 }
 ListNode* findMid(ListNode* head){
     ListNode* slow=head;
     ListNode* fast=head->next;
     while(fast && fast->next){
         
        fast=fast->next->next;
        slow=slow->next;
     }
     return slow;
 }
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;

        }

        ListNode * mid=findMid(head);
        ListNode*left=head;
        ListNode* right=mid->next;
        mid->next=NULL;

        //recursive call

        left=sortList(left);
        right=sortList(right);

        //merge
        ListNode * mergeLL=merge(left,right);

        return mergeLL;
    }
};










