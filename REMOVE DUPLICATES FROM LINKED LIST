

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.





class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head==NULL){
            return NULL;
        }
        if(head->next==NULL){
            return head;
        }

        ListNode*curr=head;
        ListNode*temp=NULL;
        while(curr!=NULL){

            if(curr->next!=NULL &&curr->val==curr->next->val){
                temp=curr->next;
                curr->next=curr->next->next;
                
                temp->next=NULL;
                delete temp;

            }
            else{
                curr=curr->next;
            }
        }
        return head;
    }
};








