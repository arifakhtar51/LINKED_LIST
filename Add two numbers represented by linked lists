Given two decimal numbers represented by two linked lists of size N and M respectively. The task is to return a linked list that represents the sum of these two numbers.

For example, the number 190 will be represented by the linked list, 1->9->0->null, similarly 25 by 2->5->null. Sum of these two numbers is 190 + 25 = 215, which will be represented by 2->1->5->null. You are required to return the head of the linked list 2->1->5->null.

Example 1:

Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).
Example 2:

Input:
N = 2
valueN[] = {6,3}
M = 1
valueM[] = {7}
Output: 7 0
Explanation: For the given two linked
list (6 3) and (7), after adding the
two linked list resultant linked list
will be (7 0).

















//{ Driver Code Starts
// driver

#include <bits/stdc++.h>
using namespace std;

/* Linked list Node */
struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

struct Node* buildList(int size)
{
    int val;
    cin>> val;
    
    Node* head = new Node(val);
    Node* tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>> val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}
void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
    cout<< endl;
}


// } Driver Code Ends

/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution
{
    public:
    Node * reverse(Node* head){
        Node * prev=NULL;
        Node* curr=head;
        Node* next=head->next;
        
        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
            //       OR
            //        |
            // if(next!=NULL)
            // next=curr->next;
            
        }
        return prev;
    }
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        // code here
        first=reverse(first);
        second=reverse(second);
        
        Node * ans=NULL;
         Node * anskahead=NULL;
         Node * anskatail=NULL;
         int carry=0;
         
         while(first!=NULL && second !=NULL){
             int sum=carry+first->data+second->data;
             int digit =sum%10;
             carry=sum/10;
             Node * newNode=new Node(digit);
             if(anskahead==NULL){
                 anskahead=newNode;
                 anskatail=newNode;
             }
             else{
                 anskatail->next=newNode;
                 anskatail=newNode;
             }
             first=first->next;
             second=second->next;
             
         }
         while(first!=NULL){
                int sum=carry+first->data;
                int digit=sum%10;
                 carry =sum/10;
                 Node * newNode=new Node(digit);
                  anskatail->next=newNode;
                 anskatail=newNode;
                 first=first->next;
         }
        while(second!=NULL){
                int sum=carry+second->data;
                int digit=sum%10;
                 carry =sum/10;
                 Node * newNode=new Node(digit);
                  anskatail->next=newNode;
                 anskatail=newNode;
                 second=second->next;
         }
        
        while(carry!=0){
            int sum=carry;
             int digit=sum%10;
                 carry =sum/10;
                 Node * newNode=new Node(digit);
                  anskatail->next=newNode;
                 anskatail=newNode;
    
        }
        anskahead=reverse(anskahead);
        return anskahead;
        
        
    }
};





